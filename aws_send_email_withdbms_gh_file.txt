BEGIN
  DBMS_CLOUD.CREATE_CREDENTIAL(
    credential_name => 'AWS_CRED',
    username => 'AWS-ACCESS-KEY',
    password => 'AWS-SECRET-KEY');
END;



BEGIN
  DBMS_NETWORK_ACL_ADMIN.CREATE_ACL(
    acl          => 'aws_api_gateway_acl.xml',
    description  => 'ACL for AWS API Gateway access',
    principal    => 'USER_SCHEMA', -- Replace with your schema (e.g., SCOTT)
    is_grant     => TRUE,
    privilege    => 'connect',
    start_date   => SYSTIMESTAMP,
    end_date     => NULL
  );
  COMMIT;
END;


BEGIN
  DBMS_NETWORK_ACL_ADMIN.ASSIGN_ACL(
    acl         => 'aws_api_gateway_acl.xml',
    host        => '*.execute-api.region.amazonaws.com', -- Wildcard for AWS API Gateway in your region
    lower_port  => 443, -- HTTPS port
    upper_port  => 443
  );
  COMMIT;
END;

BEGIN
  DBMS_NETWORK_ACL_ADMIN.ADD_PRIVILEGE(
    acl         => 'aws_api_gateway_acl.xml', -- Use existing ACL name if different
    principal   => 'USER_SCHEMA', -- Your schema name
    is_grant    => TRUE,
    privilege   => 'http'
  );
  COMMIT;
END; 

BEGIN
  DBMS_NETWORK_ACL_ADMIN.ADD_PRIVILEGE(
    acl         => 'aws_api_gateway_acl.xml', -- Use existing ACL name if different
    principal   => 'USER_SCHEMA', -- Your schema name
    is_grant    => TRUE,
    privilege   => 'connect'
  );
  COMMIT;
END;


CREATE OR REPLACE PROCEDURE send_email_dbms_cloud(to_email IN VARCHAR2) AS
  l_payload         clob;
  l_payload1         blob;
  l_json_response CLOB;
  l_http_response DBMS_CLOUD_TYPES.resp;
  l_response_text CLOB;
  l_status_code varchar2(20);
  -- AWS constants
  region          VARCHAR2(20) := 'us-east-2';
  aws_endpoint    VARCHAR2(100) := 'https://***AWS-API-ID***.execute-api.us-east-2.amazonaws.com/stage/resource';
  -- Declare custom HMAC-SHA256 function
  FUNCTION hmac_sha256(p_key RAW, p_data RAW) RETURN RAW IS
  BEGIN
    RETURN DBMS_CRYPTO.MAC(p_data, DBMS_CRYPTO.HMAC_SH256, p_key);
  END hmac_sha256;
BEGIN
  -- Build JSON payload
  l_payload := '{"PAYLOADBODY"}}}';
  l_payload1 := UTL_I18N.STRING_TO_RAW(l_payload,'AL32UTF8');
    DBMS_OUTPUT.PUT_LINE('Status Code: ' || l_payload);
  l_http_response := DBMS_CLOUD.SEND_REQUEST(
    credential_name => 'aws_cred',
    uri             => aws_endpoint,
    method          => DBMS_CLOUD.METHOD_POST,
    body            => l_payload1
    ) ;
    l_response_text := DBMS_CLOUD.GET_RESPONSE_HEADERS(l_http_response).to_clob;
    
    -- Output success message and response headers
    DBMS_OUTPUT.PUT_LINE('Function invoked successfully using DBMS_CLOUD.SEND_REQUEST! ' || l_response_text);

    -- Get the status code from the response
    l_status_code := DBMS_CLOUD.get_response_status_code(l_http_response);
    DBMS_OUTPUT.PUT_LINE('Function Invocation Response Code is ' || l_status_code);

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END send_email_dbms_cloud;

BEGIN
    send_email_dbms_cloud('type your emailid here');
end;
/
